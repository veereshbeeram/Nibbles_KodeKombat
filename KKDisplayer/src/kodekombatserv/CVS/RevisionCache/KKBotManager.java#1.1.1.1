/*
 * Error Coding for Bots
 * -1 : Unknown Error Message
 * -2 : Connection termination
 * -3 : IOException thrown while communicating
 *
 *
 */
package kodekombatserv;

import java.awt.Dimension;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Saish Kamat
 */
public class KKBotManager implements KKBotManagerCallback {

    ArrayList<KKSnake> list;
    int currid;
    Dimension size;

    public KKBotManager(int width, int height) {
        currid = 0;
        size = new Dimension(width, height);
        list = new ArrayList<KKSnake>();
    }

    public int KKAddSnake() {
        try {
            KKSnake tsnake = new KKSnake(currid++, size.width, size.height);

            list.add(tsnake);

        } catch (Exception ex) {
            //Random Error Message
            return -1;
        }
        //Update UI

        return currid;
    }

    public int KKRemSnake(int id) {
        try {
            for (int i = 0; i < list.size(); i++) {
                if (list.get(i).id == id) {
                    list.remove(i);
                }
            }
        } catch (Exception ex) {
            //Random Error Message;
            return -1;
        }

        //Update UI
        return 0;
    }

    public int KKMoveLeft(int id) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public int KKMoveRight(int id) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public int KKMoveUp(int id) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public int KKMoveDown(int id) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public int KKErrorCallback(int id, int errid) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public int KKControlMessage(int id, Object data) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}

interface KKBotManagerCallback {

    public int KKControlMessage(int id, Object data);

    public int KKAddSnake();

    public int KKRemSnake(int id);

    public int KKErrorCallback(int id, int errid);

    public int KKMoveLeft(int id);

    public int KKMoveRight(int id);

    public int KKMoveUp(int id);

    public int KKMoveDown(int id);
}

class KKLowLevelServer extends Thread {

    KKBotManagerCallback botmanager;

    public KKLowLevelServer(KKBotManagerCallback botmanager) {
        this.botmanager = botmanager;
    }

    @Override
    public void run() {
        try {
            ServerSocket serv = new ServerSocket(20000);

            while (true) {
                Socket client = serv.accept();

                Thread botproc = new KKLowLevelBotProcessor(client, this.botmanager);
                botproc.start();
            }
        } catch (IOException ex) {
//            Logger.getLogger(KKLowLevelServer.class.getName()).log(Level.SEVERE, null, ex);
            botmanager.KKControlMessage(-100, "KKLowLevelServer has crashed. No new connections can be made.");
        }
    }
}

class KKLowLevelBotProcessor extends Thread {

    KKBotManagerCallback botmanager;
    Socket client;

    public KKLowLevelBotProcessor(Socket client, KKBotManagerCallback botmanager) {
        this.botmanager = botmanager;
    }

    @Override
    public void run() {

        while(true)
        {

        }
        //run your protocol checks

        //incase crash happens notify Botmanager
    }
}